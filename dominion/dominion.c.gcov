        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:6
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      150:    8:int compare(const void* a, const void* b) {
      150:    9:    if (*(int*)a > *(int*)b)
    #####:   10:        return 1;
      150:   11:    if (*(int*)a < *(int*)b)
       40:   12:        return -1;
      110:   13:    return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
        5:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:    
        -:   40:    int i;
        -:   41:    int j;
        -:   42:    int it;
        -:   43:    //set up random number generator
        5:   44:    SelectStream(1);
        5:   45:    PutSeed((long)randomSeed);
        -:   46:    
        -:   47:    //check number of players
        5:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:        return -1;
        -:   51:    }
        -:   52:    
        -:   53:    //set number of players
        5:   54:    state->numPlayers = numPlayers;
        -:   55:    
        -:   56:    //check selected kingdom cards are different
       55:   57:    for (i = 0; i < 10; i++)
        -:   58:    {
      550:   59:        for (j = 0; j < 10; j++)
        -:   60:        {
      500:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:            {
    #####:   63:                return -1;
        -:   64:            }
        -:   65:        }
        -:   66:    }
        -:   67:    
        -:   68:    
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:    
        -:   72:    //set number of Curse cards
        5:   73:    if (numPlayers == 2)
        -:   74:    {
        5:   75:        state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:    else if (numPlayers == 3)
        -:   78:    {
    #####:   79:        state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:    else
        -:   82:    {
    #####:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:    
        -:   86:    //set number of Victory cards
        5:   87:    if (numPlayers == 2)
        -:   88:    {
        5:   89:        state->supplyCount[estate] = 8;
        5:   90:        state->supplyCount[duchy] = 8;
        5:   91:        state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:    else
        -:   94:    {
    #####:   95:        state->supplyCount[estate] = 12;
    #####:   96:        state->supplyCount[duchy] = 12;
    #####:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:    
        -:  100:    //set number of Treasure cards
        5:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
        5:  102:    state->supplyCount[silver] = 40;
        5:  103:    state->supplyCount[gold] = 30;
        -:  104:    
        -:  105:    //set number of Kingdom cards
      105:  106:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      825:  108:        for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:        {
      775:  110:            if (kingdomCards[j] == i)
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
       55:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:                {
        5:  115:                    if (numPlayers == 2){
        5:  116:                        state->supplyCount[i] = 8;
        -:  117:                    }
    #####:  118:                    else{ state->supplyCount[i] = 12; }
        -:  119:                }
        -:  120:                else
        -:  121:                {
       45:  122:                    state->supplyCount[i] = 10;
        -:  123:                }
       50:  124:                break;
        -:  125:            }
        -:  126:            else    //card is not in the set choosen for the game
        -:  127:            {
      725:  128:                state->supplyCount[i] = -1;
        -:  129:            }
        -:  130:        }
        -:  131:        
        -:  132:    }
        -:  133:    
        -:  134:    ////////////////////////
        -:  135:    //supply intilization complete
        -:  136:    
        -:  137:    //set player decks
       15:  138:    for (i = 0; i < numPlayers; i++)
        -:  139:    {
       10:  140:        state->deckCount[i] = 0;
       40:  141:        for (j = 0; j < 3; j++)
        -:  142:        {
       30:  143:            state->deck[i][j] = estate;
       30:  144:            state->deckCount[i]++;
        -:  145:        }
       80:  146:        for (j = 3; j < 10; j++)
        -:  147:        {
       70:  148:            state->deck[i][j] = copper;
       70:  149:            state->deckCount[i]++;
        -:  150:        }
        -:  151:    }
        -:  152:    
        -:  153:    //shuffle player decks
       15:  154:    for (i = 0; i < numPlayers; i++)
        -:  155:    {
       10:  156:        if ( shuffle(i, state) < 0 )
        -:  157:        {
    #####:  158:            return -1;
        -:  159:        }
        -:  160:    }
        -:  161:    
        -:  162:    //draw player hands
       15:  163:    for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:        //initialize hand size to zero
       10:  166:        state->handCount[i] = 0;
       10:  167:        state->discardCount[i] = 0;
        -:  168:        //draw 5 cards
        -:  169:        // for (j = 0; j < 5; j++)
        -:  170:        //	{
        -:  171:        //	  drawCard(i, state);
        -:  172:        //	}
        -:  173:    }
        -:  174:    
        -:  175:    //set embargo tokens to 0 for all supply piles
      140:  176:    for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      135:  178:        state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:    
        -:  181:    //initialize first player's turn
        5:  182:    state->outpostPlayed = 0;
        5:  183:    state->phase = 0;
        5:  184:    state->numActions = 1;
        5:  185:    state->numBuys = 1;
        5:  186:    state->playedCardCount = 0;
        5:  187:    state->whoseTurn = 0;
        5:  188:    state->handCount[state->whoseTurn] = 0;
        -:  189:    //int it; move to top
        -:  190:    
        -:  191:    //Moved draw cards to here, only drawing at the start of a turn
       30:  192:    for (it = 0; it < 5; it++){
       25:  193:        drawCard(state->whoseTurn, state);
        -:  194:    }
        -:  195:    
        5:  196:    updateCoins(state->whoseTurn, state, 0);
        -:  197:    
        5:  198:    return 0;
        -:  199:}
        -:  200:
       12:  201:int shuffle(int player, struct gameState *state) {
        -:  202:    
        -:  203:    
        -:  204:    int newDeck[MAX_DECK];
       12:  205:    int newDeckPos = 0;
        -:  206:    int card;
        -:  207:    int i;
        -:  208:    
       12:  209:    if (state->deckCount[player] < 1)
        2:  210:        return -1;
       10:  211:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:    
      120:  214:    while (state->deckCount[player] > 0) {
      100:  215:        card = floor(Random() * state->deckCount[player]);
      100:  216:        newDeck[newDeckPos] = state->deck[player][card];
      100:  217:        newDeckPos++;
      310:  218:        for (i = card; i < state->deckCount[player]-1; i++) {
      210:  219:            state->deck[player][i] = state->deck[player][i+1];
        -:  220:        }
      100:  221:        state->deckCount[player]--;
        -:  222:    }
      110:  223:    for (i = 0; i < newDeckPos; i++) {
      100:  224:        state->deck[player][i] = newDeck[i];
      100:  225:        state->deckCount[player]++;
        -:  226:    }
        -:  227:    
       10:  228:    return 0;
        -:  229:}
        -:  230:
        2:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:    int card;
        2:  234:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:    
        -:  236:    //check if it is the right phase
        2:  237:    if (state->phase != 0)
        -:  238:    {
    #####:  239:        return -1;
        -:  240:    }
        -:  241:    
        -:  242:    //check if player has enough actions
        2:  243:    if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:        return -1;
        -:  246:    }
        -:  247:    
        -:  248:    //get card played
        2:  249:    card = handCard(handPos, state);
        -:  250:    
        -:  251:    //check if selected card is an action
        2:  252:    if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:        return -1;
        -:  255:    }
        -:  256:    
        -:  257:    //play card
        2:  258:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:        return -1;
        -:  261:    }
        -:  262:    
        -:  263:    //reduce number of actions
        2:  264:    state->numActions--;
        -:  265:    
        -:  266:    //update coins (Treasure cards may be added with card draws)
        2:  267:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:    
        2:  269:    return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:    int who;
    #####:  274:    if (DEBUG){
        -:  275:        printf("Entering buyCard...\n");
        -:  276:    }
        -:  277:    
        -:  278:    // I don't know what to do about the phase thing.
        -:  279:    
    #####:  280:    who = state->whoseTurn;
        -:  281:    
    #####:  282:    if (state->numBuys < 1){
    #####:  283:        if (DEBUG)
        -:  284:            printf("You do not have any buys left\n");
    #####:  285:        return -1;
    #####:  286:    } else if (supplyCount(supplyPos, state) <1){
    #####:  287:        if (DEBUG)
        -:  288:            printf("There are not any of that type of card left\n");
    #####:  289:        return -1;
    #####:  290:    } else if (state->coins < getCost(supplyPos)){
    #####:  291:        if (DEBUG)
        -:  292:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:        return -1;
        -:  294:    } else {
    #####:  295:        state->phase=1;
        -:  296:        //state->supplyCount[supplyPos]--;
    #####:  297:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:        
    #####:  299:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:        state->numBuys--;
    #####:  301:        if (DEBUG)
        -:  302:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:    }
        -:  304:    
        -:  305:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:    //state->discardCount[who]++;
        -:  307:    
    #####:  308:    return 0;
        -:  309:}
        -:  310:
        2:  311:int numHandCards(struct gameState *state) {
        2:  312:    return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        4:  315:int handCard(int handPos, struct gameState *state) {
        4:  316:    int currentPlayer = whoseTurn(state);
        4:  317:    return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:    return state->supplyCount[card];
        -:  322:}
        -:  323:
        2:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:    int i;
        2:  326:    int count = 0;
        -:  327:    
       12:  328:    for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
       10:  330:        if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:    
        2:  333:    for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:        if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:    
        2:  338:    for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:        if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:    
        2:  343:    return count;
        -:  344:}
        -:  345:
        8:  346:int whoseTurn(struct gameState *state) {
        8:  347:    return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:    int k;
        -:  352:    int i;
    #####:  353:    int currentPlayer = whoseTurn(state);
        -:  354:    
        -:  355:    //Discard hand
    #####:  356:    for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:    }
    #####:  360:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:    //Code for determining the player
    #####:  363:    if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:    }
        -:  366:    else{
    #####:  367:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:    }
        -:  369:    
    #####:  370:    state->outpostPlayed = 0;
    #####:  371:    state->phase = 0;
    #####:  372:    state->numActions = 1;
    #####:  373:    state->coins = 0;
    #####:  374:    state->numBuys = 1;
    #####:  375:    state->playedCardCount = 0;
    #####:  376:    state->handCount[state->whoseTurn] = 0;
        -:  377:    
        -:  378:    //int k; move to top
        -:  379:    //Next player draws hand
    #####:  380:    for (k = 0; k < 5; k++){
    #####:  381:        drawCard(state->whoseTurn, state);//Draw a card
        -:  382:    }
        -:  383:    
        -:  384:    //Update money
    #####:  385:    updateCoins(state->whoseTurn, state , 0);
        -:  386:    
    #####:  387:    return 0;
        -:  388:}
        -:  389:
        2:  390:int isGameOver(struct gameState *state) {
        -:  391:    int i;
        -:  392:    int j;
        -:  393:    
        -:  394:    //if stack of Province cards is empty, the game ends
        2:  395:    if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:        return 1;
        -:  398:    }
        -:  399:    
        -:  400:    //if three supply pile are at 0, the game ends
        2:  401:    j = 0;
       52:  402:    for (i = 0; i < 25; i++)
        -:  403:    {
       50:  404:        if (state->supplyCount[i] == 0)
        -:  405:        {
       48:  406:            j++;
        -:  407:        }
        -:  408:    }
        2:  409:    if ( j >= 3)
        -:  410:    {
        2:  411:        return 1;
        -:  412:    }
        -:  413:    
    #####:  414:    return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:    
        -:  419:    int i;
    #####:  420:    int score = 0;
        -:  421:    //score from hand
    #####:  422:    for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:        if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:        if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:        if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:        if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:        if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:    
        -:  432:    //score from discard
    #####:  433:    for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:        if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:        if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:        if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:        if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:        if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:    
        -:  443:    //score from deck
    #####:  444:    for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:        if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:        if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:        if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:        if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:        if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:    
    #####:  454:    return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:    int i;
        -:  459:    int j;
        -:  460:    int highScore;
        -:  461:    int currentPlayer;
        -:  462:    
        -:  463:    //get score for each player
    #####:  464:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:        //set unused player scores to -9999
    #####:  467:        if (i >= state->numPlayers)
        -:  468:        {
    #####:  469:            players[i] = -9999;
        -:  470:        }
        -:  471:        else
        -:  472:        {
    #####:  473:            players[i] = scoreFor (i, state);
        -:  474:        }
        -:  475:    }
        -:  476:    
        -:  477:    //find highest score
    #####:  478:    j = 0;
    #####:  479:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:        if (players[i] > players[j])
        -:  482:        {
    #####:  483:            j = i;
        -:  484:        }
        -:  485:    }
    #####:  486:    highScore = players[j];
        -:  487:    
        -:  488:    //add 1 to players who had less turns
    #####:  489:    currentPlayer = whoseTurn(state);
    #####:  490:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:        if ( players[i] == highScore && i > currentPlayer )
        -:  493:        {
    #####:  494:            players[i]++;
        -:  495:        }
        -:  496:    }
        -:  497:    
        -:  498:    //find new highest score
    #####:  499:    j = 0;
    #####:  500:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:        if ( players[i] > players[j] )
        -:  503:        {
    #####:  504:            j = i;
        -:  505:        }
        -:  506:    }
    #####:  507:    highScore = players[j];
        -:  508:    
        -:  509:    //set winners in array to 1 and rest to 0
    #####:  510:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:        if ( players[i] == highScore )
        -:  513:        {
    #####:  514:            players[i] = 1;
        -:  515:        }
        -:  516:        else
        -:  517:        {
    #####:  518:            players[i] = 0;
        -:  519:        }
        -:  520:    }
        -:  521:    
    #####:  522:    return 0;
        -:  523:}
        -:  524:
       37:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:    int deckCounter;
       37:  528:    if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:        
        -:  530:        //Step 1 Shuffle the discard pile back into a deck
        -:  531:        int i;
        -:  532:        //Move discard to deck
        2:  533:        for (i = 0; i < state->discardCount[player];i++){
    #####:  534:            state->deck[player][i] = state->discard[player][i];
    #####:  535:            state->discard[player][i] = -1;
        -:  536:        }
        -:  537:        
        2:  538:        state->deckCount[player] = state->discardCount[player];
        2:  539:        state->discardCount[player] = 0;//Reset discard
        -:  540:        
        -:  541:        //Shufffle the deck
        2:  542:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:        
        2:  544:        if (DEBUG){//Debug statements
        -:  545:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:        }
        -:  547:        
        2:  548:        state->discardCount[player] = 0;
        -:  549:        
        -:  550:        //Step 2 Draw Card
        2:  551:        count = state->handCount[player];//Get current player's hand count
        -:  552:        
        2:  553:        if (DEBUG){//Debug statements
        -:  554:            printf("Current hand count: %d\n", count);
        -:  555:        }
        -:  556:        
        2:  557:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:        
        2:  559:        if (deckCounter == 0)
        2:  560:            return -1;
        -:  561:        
    #####:  562:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:        state->deckCount[player]--;
    #####:  564:        state->handCount[player]++;//Increment hand count
        -:  565:    }
        -:  566:    
        -:  567:    else{
       35:  568:        int count = state->handCount[player];//Get current hand count for player
        -:  569:        int deckCounter;
       35:  570:        if (DEBUG){//Debug statements
        -:  571:            printf("Current hand count: %d\n", count);
        -:  572:        }
        -:  573:        
       35:  574:        deckCounter = state->deckCount[player];//Create holder for the deck count
       35:  575:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       35:  576:        state->deckCount[player]--;
       35:  577:        state->handCount[player]++;//Increment hand count
        -:  578:    }
        -:  579:    
       35:  580:    return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:    switch( cardNumber )
        -:  586:    {
        -:  587:        case curse:
    #####:  588:            return 0;
        -:  589:        case estate:
    #####:  590:            return 2;
        -:  591:        case duchy:
    #####:  592:            return 5;
        -:  593:        case province:
    #####:  594:            return 8;
        -:  595:        case copper:
    #####:  596:            return 0;
        -:  597:        case silver:
    #####:  598:            return 3;
        -:  599:        case gold:
    #####:  600:            return 6;
        -:  601:        case adventurer:
    #####:  602:            return 6;
        -:  603:        case council_room:
    #####:  604:            return 5;
        -:  605:        case feast:
    #####:  606:            return 4;
        -:  607:        case gardens:
    #####:  608:            return 4;
        -:  609:        case mine:
    #####:  610:            return 5;
        -:  611:        case remodel:
    #####:  612:            return 4;
        -:  613:        case smithy:
    #####:  614:            return 4;
        -:  615:        case village:
    #####:  616:            return 3;
        -:  617:        case baron:
    #####:  618:            return 4;
        -:  619:        case great_hall:
    #####:  620:            return 3;
        -:  621:        case minion:
    #####:  622:            return 5;
        -:  623:        case steward:
    #####:  624:            return 3;
        -:  625:        case tribute:
    #####:  626:            return 5;
        -:  627:        case ambassador:
    #####:  628:            return 3;
        -:  629:        case cutpurse:
    #####:  630:            return 4;
        -:  631:        case embargo:
    #####:  632:            return 2;
        -:  633:        case outpost:
    #####:  634:            return 5;
        -:  635:        case salvager:
    #####:  636:            return 4;
        -:  637:        case sea_hag:
    #####:  638:            return 4;
        -:  639:        case treasure_map:
    #####:  640:            return 4;
        -:  641:    }
        -:  642:    
    #####:  643:    return -1;
        -:  644:}
        -:  645:
        -:  646:/***************************
        -:  647: * Refactored code from cardEffect
        -:  648: ***************************/
    #####:  649:int Council_room (struct gameState *state, int currentPlayer, int handPos){
        -:  650:    int i;
        -:  651:    //+4 Cards
    #####:  652:    for (i = -4; i < 4; i++)
    #####:  653:        drawCard(currentPlayer, state);
        -:  654:    
        -:  655:    //+1 Buy
    #####:  656:    state->numBuys++;
        -:  657:    
        -:  658:    //Each other player draws a card
    #####:  659:    for (i = 0; i < state->numPlayers; i++){
    #####:  660:        if ( i != currentPlayer )
    #####:  661:            drawCard(i, state);
        -:  662:    }
        -:  663:    
        -:  664:    //put played card in played card pile
    #####:  665:    discardCard(handPos, currentPlayer, state, 0);
        -:  666:    
    #####:  667:    return 0;
        -:  668:}
        -:  669:
        2:  670:int Smithy(struct gameState *state, int currentPlayer, int handPos){
        -:  671:    int i;
        -:  672:    //+3 Cards
       14:  673:    for (i = -3; i < 3; i++){
       12:  674:        drawCard(currentPlayer, state);
        -:  675:    }
        -:  676:    
        -:  677:    //discard card from hand
        2:  678:    discardCard(handPos, currentPlayer, state, 0);
        2:  679:    return 0;
        -:  680:}
        -:  681:
    #####:  682:int Village(struct gameState *state, int currentPlayer, int handPos){
        -:  683:    //+1 Card
    #####:  684:    drawCard(currentPlayer, state);
        -:  685:    
        -:  686:    //+2 Actions
    #####:  687:    state->numActions = state->numActions + 2;
        -:  688:    
        -:  689:    //discard played card from hand
    #####:  690:    discardCard(handPos, currentPlayer, state, 0);
    #####:  691:    return 0;
        -:  692:}
        -:  693:
    #####:  694:int Great_hall(struct gameState *state, int currentPlayer, int handPos){
        -:  695:    //+1 Card
    #####:  696:    drawCard(currentPlayer, state);
        -:  697:    
        -:  698:    //+1 Actions
    #####:  699:    state->numActions++;
        -:  700:    
        -:  701:    //discard card from hand
    #####:  702:    discardCard(handPos, currentPlayer, state, 0);
    #####:  703:    return 0;
        -:  704:}
        -:  705:
    #####:  706:int Embargo(struct gameState *state, int currentPlayer, int handPos, int choice1){
        -:  707:    //+2 Coins
    #####:  708:    state->coins = state->coins + 2;
        -:  709:    
        -:  710:    //see if selected pile is in play
    #####:  711:    if ( state->supplyCount[choice1] == -1 )
    #####:  712:        return -1;
        -:  713:    
        -:  714:    //add embargo token to selected supply pile
    #####:  715:    state->embargoTokens[choice1]++;
        -:  716:    
        -:  717:    //trash card
    #####:  718:    discardCard(handPos, currentPlayer, state, 1);
    #####:  719:    return 0;
        -:  720:}
        -:  721://**************************
        -:  722:
        2:  723:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  724:{
        -:  725:    int i;
        -:  726:    int j;
        -:  727:    int k;
        -:  728:    int x;
        -:  729:    int index;
        2:  730:    int currentPlayer = whoseTurn(state);
        2:  731:    int nextPlayer = currentPlayer + 1;
        -:  732:    
        2:  733:    int tributeRevealedCards[2] = {-1, -1};
        -:  734:    int temphand[MAX_HAND];// moved above the if statement
        2:  735:    int drawntreasure=0;
        -:  736:    int cardDrawn;
        2:  737:    int z = 0;// this is the counter for the temp hand
        2:  738:    if (nextPlayer > (state->numPlayers - 1)){
    #####:  739:        nextPlayer = 0;
        -:  740:    }
        -:  741:    
        -:  742:    //uses switch to select card and perform actions
        2:  743:    switch( card )
        -:  744:    {
        -:  745:        case adventurer:
    #####:  746:            while(drawntreasure<2){
    #####:  747:                if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  748:                    shuffle(currentPlayer, state);
        -:  749:                }
    #####:  750:                drawCard(currentPlayer, state);
    #####:  751:                cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  752:                if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  753:                    drawntreasure++;
        -:  754:                else{
    #####:  755:                    temphand[z]=cardDrawn;
    #####:  756:                    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  757:                    z++;
        -:  758:                }
        -:  759:            }
    #####:  760:            while(z-1>=0){
    #####:  761:                state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  762:                z=z-1;
        -:  763:            }
    #####:  764:            return 0;
        -:  765:            
        -:  766:        case council_room:
    #####:  767:            return Council_room(state, currentPlayer, handPos);
        -:  768:            
        -:  769:        case feast:
        -:  770:            //gain card with cost up to 5
        -:  771:            //Backup hand
    #####:  772:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  773:                temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  774:                state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  775:            }
        -:  776:            //Backup hand
        -:  777:            
        -:  778:            //Update Coins for Buy
    #####:  779:            updateCoins(currentPlayer, state, 5);
    #####:  780:            x = 1;//Condition to loop on
    #####:  781:            while( x == 1) {//Buy one card
    #####:  782:                if (supplyCount(choice1, state) <= 0){
    #####:  783:                    if (DEBUG)
        -:  784:                        printf("None of that card left, sorry!\n");
        -:  785:                    
    #####:  786:                    if (DEBUG){
        -:  787:                        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  788:                    }
        -:  789:                }
    #####:  790:                else if (state->coins < getCost(choice1)){
    #####:  791:                    printf("That card is too expensive!\n");
        -:  792:                    
    #####:  793:                    if (DEBUG){
        -:  794:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  795:                    }
        -:  796:                }
        -:  797:                else{
        -:  798:                    
    #####:  799:                    if (DEBUG){
        -:  800:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  801:                    }
        -:  802:                    
    #####:  803:                    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  804:                    x = 0;//No more buying cards
        -:  805:                    
    #####:  806:                    if (DEBUG){
        -:  807:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  808:                    }
        -:  809:                    
        -:  810:                }
        -:  811:            }
        -:  812:            
        -:  813:            //Reset Hand
    #####:  814:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  815:                state->hand[currentPlayer][i] = temphand[i];
    #####:  816:                temphand[i] = -1;
        -:  817:            }
        -:  818:            //Reset Hand
        -:  819:            
    #####:  820:            return 0;
        -:  821:            
        -:  822:        case gardens:
    #####:  823:            return -1;
        -:  824:            
        -:  825:        case mine:
    #####:  826:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  827:            
    #####:  828:            if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  829:            {
    #####:  830:                return -1;
        -:  831:            }
        -:  832:            
    #####:  833:            if (choice2 > treasure_map || choice2 < curse)
        -:  834:            {
    #####:  835:                return -1;
        -:  836:            }
        -:  837:            
    #####:  838:            if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  839:            {
    #####:  840:                return -1;
        -:  841:            }
        -:  842:            
    #####:  843:            gainCard(choice2, state, 2, currentPlayer);
        -:  844:            
        -:  845:            //discard card from hand
    #####:  846:            discardCard(handPos, currentPlayer, state, 0);
        -:  847:            
        -:  848:            //discard trashed card
    #####:  849:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  850:            {
    #####:  851:                if (state->hand[currentPlayer][i] == j)
        -:  852:                {
    #####:  853:                    discardCard(i, currentPlayer, state, 0);
    #####:  854:                    break;
        -:  855:                }
        -:  856:            }
        -:  857:            
    #####:  858:            return 0;
        -:  859:            
        -:  860:        case remodel:
    #####:  861:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  862:            
    #####:  863:            if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  864:            {
    #####:  865:                return -1;
        -:  866:            }
        -:  867:            
    #####:  868:            gainCard(choice2, state, 0, currentPlayer);
        -:  869:            
        -:  870:            //discard card from hand
    #####:  871:            discardCard(handPos, currentPlayer, state, 0);
        -:  872:            
        -:  873:            //discard trashed card
    #####:  874:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  875:            {
    #####:  876:                if (state->hand[currentPlayer][i] == j)
        -:  877:                {
    #####:  878:                    discardCard(i, currentPlayer, state, 0);
    #####:  879:                    break;
        -:  880:                }
        -:  881:            }
        -:  882:            
        -:  883:            
    #####:  884:            return 0;
        -:  885:            
        -:  886:        case smithy:
        2:  887:            return Smithy(state, currentPlayer, handPos);
        -:  888:            
        -:  889:        case village:
    #####:  890:            return Village(state, currentPlayer, handPos);
        -:  891:            
        -:  892:        case baron:
    #####:  893:            state->numBuys++;//Increase buys by 1!
    #####:  894:            if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  895:                int p = 0;//Iterator for hand!
    #####:  896:                int card_not_discarded = 1;//Flag for discard set!
    #####:  897:                while(card_not_discarded){
    #####:  898:                    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  899:                        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  900:                        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  901:                        state->discardCount[currentPlayer]++;
    #####:  902:                        for (;p < state->handCount[currentPlayer]; p++){
    #####:  903:                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  904:                        }
    #####:  905:                        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  906:                        state->handCount[currentPlayer]--;
    #####:  907:                        card_not_discarded = 0;//Exit the loop
        -:  908:                    }
    #####:  909:                    else if (p > state->handCount[currentPlayer]){
    #####:  910:                        if(DEBUG) {
        -:  911:                            printf("No estate cards in your hand, invalid choice\n");
        -:  912:                            printf("Must gain an estate if there are any\n");
        -:  913:                        }
    #####:  914:                        if (supplyCount(estate, state) > 0){
    #####:  915:                            gainCard(estate, state, 0, currentPlayer);
    #####:  916:                            state->supplyCount[estate]--;//Decrement estates
    #####:  917:                            if (supplyCount(estate, state) == 0){
    #####:  918:                                isGameOver(state);
        -:  919:                            }
        -:  920:                        }
    #####:  921:                        card_not_discarded = 0;//Exit the loop
        -:  922:                    }
        -:  923:                    
        -:  924:                    else{
    #####:  925:                        p++;//Next card
        -:  926:                    }
        -:  927:                }
        -:  928:            }
        -:  929:            
        -:  930:            else{
    #####:  931:                if (supplyCount(estate, state) > 0){
    #####:  932:                    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  933:                    state->supplyCount[estate]--;//Decrement Estates
    #####:  934:                    if (supplyCount(estate, state) == 0){
    #####:  935:                        isGameOver(state);
        -:  936:                    }
        -:  937:                }
        -:  938:            }
        -:  939:            
        -:  940:            
    #####:  941:            return 0;
        -:  942:            
        -:  943:        case great_hall:
    #####:  944:            return Great_hall(state, currentPlayer, handPos);
        -:  945:            
        -:  946:        case minion:
        -:  947:            //+1 action
    #####:  948:            state->numActions++;
        -:  949:            
        -:  950:            //discard card from hand
    #####:  951:            discardCard(handPos, currentPlayer, state, 0);
        -:  952:            
    #####:  953:            if (choice1)		//+2 coins
        -:  954:            {
    #####:  955:                state->coins = state->coins + 2;
        -:  956:            }
        -:  957:            
    #####:  958:            else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  959:            {
        -:  960:                //discard hand
    #####:  961:                while(numHandCards(state) > 0)
        -:  962:                {
    #####:  963:                    discardCard(handPos, currentPlayer, state, 0);
        -:  964:                }
        -:  965:                
        -:  966:                //draw 4
    #####:  967:                for (i = 0; i < 4; i++)
        -:  968:                {
    #####:  969:                    drawCard(currentPlayer, state);
        -:  970:                }
        -:  971:                
        -:  972:                //other players discard hand and redraw if hand size > 4
    #####:  973:                for (i = 0; i < state->numPlayers; i++)
        -:  974:                {
    #####:  975:                    if (i != currentPlayer)
        -:  976:                    {
    #####:  977:                        if ( state->handCount[i] > 4 )
        -:  978:                        {
        -:  979:                            //discard hand
    #####:  980:                            while( state->handCount[i] > 0 )
        -:  981:                            {
    #####:  982:                                discardCard(handPos, i, state, 0);
        -:  983:                            }
        -:  984:                            
        -:  985:                            //draw 4
    #####:  986:                            for (j = 0; j < 4; j++)
        -:  987:                            {
    #####:  988:                                drawCard(i, state);
        -:  989:                            }
        -:  990:                        }
        -:  991:                    }
        -:  992:                }
        -:  993:                
        -:  994:            }
    #####:  995:            return 0;
        -:  996:            
        -:  997:        case steward:
    #####:  998:            if (choice1 == 1)
        -:  999:            {
        -: 1000:                //+2 cards
    #####: 1001:                drawCard(currentPlayer, state);
    #####: 1002:                drawCard(currentPlayer, state);
        -: 1003:            }
    #####: 1004:            else if (choice1 == 2)
        -: 1005:            {
        -: 1006:                //+2 coins
    #####: 1007:                state->coins = state->coins + 2;
        -: 1008:            }
        -: 1009:            else
        -: 1010:            {
        -: 1011:                //trash 2 cards in hand
    #####: 1012:                discardCard(choice2, currentPlayer, state, 1);
    #####: 1013:                discardCard(choice3, currentPlayer, state, 1);
        -: 1014:            }
        -: 1015:            
        -: 1016:            //discard card from hand
    #####: 1017:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1018:            return 0;
        -: 1019:            
        -: 1020:        case tribute:
    #####: 1021:            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1022:                if (state->deckCount[nextPlayer] > 0){
    #####: 1023:                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1024:                    state->deckCount[nextPlayer]--;
        -: 1025:                }
    #####: 1026:                else if (state->discardCount[nextPlayer] > 0){
    #####: 1027:                    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1028:                    state->discardCount[nextPlayer]--;
        -: 1029:                }
        -: 1030:                else{
        -: 1031:                    //No Card to Reveal
    #####: 1032:                    if (DEBUG){
        -: 1033:                        printf("No cards to reveal\n");
        -: 1034:                    }
        -: 1035:                }
        -: 1036:            }
        -: 1037:            
        -: 1038:            else{
    #####: 1039:                if (state->deckCount[nextPlayer] == 0){
    #####: 1040:                    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1041:                        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1042:                        state->deckCount[nextPlayer]++;
    #####: 1043:                        state->discard[nextPlayer][i] = -1;
    #####: 1044:                        state->discardCount[nextPlayer]--;
        -: 1045:                    }
        -: 1046:                    
    #####: 1047:                    shuffle(nextPlayer,state);//Shuffle the deck
        -: 1048:                }
    #####: 1049:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1050:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1051:                state->deckCount[nextPlayer]--;
    #####: 1052:                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1053:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1054:                state->deckCount[nextPlayer]--;
        -: 1055:            }
        -: 1056:            
    #####: 1057:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1058:                state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1059:                state->playedCardCount++;
    #####: 1060:                tributeRevealedCards[1] = -1;
        -: 1061:            }
        -: 1062:            
    #####: 1063:            for (i = 0; i <= 2; i ++){
    #####: 1064:                if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1065:                    state->coins += 2;
        -: 1066:                }
        -: 1067:                
    #####: 1068:                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1069:                    drawCard(currentPlayer, state);
    #####: 1070:                    drawCard(currentPlayer, state);
        -: 1071:                }
        -: 1072:                else{//Action Card
    #####: 1073:                    state->numActions = state->numActions + 2;
        -: 1074:                }
        -: 1075:            }
        -: 1076:            
    #####: 1077:            return 0;
        -: 1078:            
        -: 1079:        case ambassador:
    #####: 1080:            j = 0;		//used to check if player has enough cards to discard
        -: 1081:            
    #####: 1082:            if (choice2 > 2 || choice2 < 0)
        -: 1083:            {
    #####: 1084:                return -1;				
        -: 1085:            }
        -: 1086:            
    #####: 1087:            if (choice1 == handPos)
        -: 1088:            {
    #####: 1089:                return -1;
        -: 1090:            }
        -: 1091:            
    #####: 1092:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1093:            {
    #####: 1094:                if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1095:                {
    #####: 1096:                    j++;
        -: 1097:                }
        -: 1098:            }
    #####: 1099:            if (j < choice2)
        -: 1100:            {
    #####: 1101:                return -1;				
        -: 1102:            }
        -: 1103:            
    #####: 1104:            if (DEBUG) 
        -: 1105:                printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1106:            
        -: 1107:            //increase supply count for choosen card by amount being discarded
    #####: 1108:            state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1109:            
        -: 1110:            //each other player gains a copy of revealed card
    #####: 1111:            for (i = 0; i < state->numPlayers; i++)
        -: 1112:            {
    #####: 1113:                if (i != currentPlayer)
        -: 1114:                {
    #####: 1115:                    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1116:                }
        -: 1117:            }
        -: 1118:            
        -: 1119:            //discard played card from hand
    #####: 1120:            discardCard(handPos, currentPlayer, state, 0);			
        -: 1121:            
        -: 1122:            //trash copies of cards returned to supply
    #####: 1123:            for (j = 0; j < choice2; j++)
        -: 1124:            {
    #####: 1125:                for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1126:                {
    #####: 1127:                    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1128:                    {
    #####: 1129:                        discardCard(i, currentPlayer, state, 1);
    #####: 1130:                        break;
        -: 1131:                    }
        -: 1132:                }
        -: 1133:            }			
        -: 1134:            
    #####: 1135:            return 0;
        -: 1136:            
        -: 1137:        case cutpurse:
        -: 1138:            
    #####: 1139:            updateCoins(currentPlayer, state, 2);
    #####: 1140:            for (i = 0; i < state->numPlayers; i++)
        -: 1141:            {
    #####: 1142:                if (i != currentPlayer)
        -: 1143:                {
    #####: 1144:                    for (j = 0; j < state->handCount[i]; j++)
        -: 1145:                    {
    #####: 1146:                        if (state->hand[i][j] == copper)
        -: 1147:                        {
    #####: 1148:                            discardCard(j, i, state, 0);
    #####: 1149:                            break;
        -: 1150:                        }
    #####: 1151:                        if (j == state->handCount[i])
        -: 1152:                        {
    #####: 1153:                            for (k = 0; k < state->handCount[i]; k++)
        -: 1154:                            {
    #####: 1155:                                if (DEBUG)
        -: 1156:                                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1157:                            }	
    #####: 1158:                            break;
        -: 1159:                        }		
        -: 1160:                    }
        -: 1161:                    
        -: 1162:                }
        -: 1163:                
        -: 1164:            }				
        -: 1165:            
        -: 1166:            //discard played card from hand
    #####: 1167:            discardCard(handPos, currentPlayer, state, 0);			
        -: 1168:            
    #####: 1169:            return 0;
        -: 1170:            
        -: 1171:            
        -: 1172:        case embargo: 
    #####: 1173:            return Embargo(state, currentPlayer, handPos, choice1);
        -: 1174:            
        -: 1175:        case outpost:
        -: 1176:            //set outpost flag
    #####: 1177:            state->outpostPlayed++;
        -: 1178:            
        -: 1179:            //discard card
    #####: 1180:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1181:            return 0;
        -: 1182:            
        -: 1183:        case salvager:
        -: 1184:            //+1 buy
    #####: 1185:            state->numBuys++;
        -: 1186:            
    #####: 1187:            if (choice1)
        -: 1188:            {
        -: 1189:                //gain coins equal to trashed card
    #####: 1190:                state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1191:                //trash card
    #####: 1192:                discardCard(choice1, currentPlayer, state, 1);	
        -: 1193:            }
        -: 1194:            
        -: 1195:            //discard card
    #####: 1196:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1197:            return 0;
        -: 1198:            
        -: 1199:        case sea_hag:
    #####: 1200:            for (i = 0; i < state->numPlayers; i++){
    #####: 1201:                if (i != currentPlayer){
    #####: 1202:                    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1203:                    state->discardCount[i]++;
    #####: 1204:                    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1205:                }
        -: 1206:            }
    #####: 1207:            return 0;
        -: 1208:            
        -: 1209:        case treasure_map:
        -: 1210:            //search hand for another treasure_map
    #####: 1211:            index = -1;
    #####: 1212:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1213:            {
    #####: 1214:                if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1215:                {
    #####: 1216:                    index = i;
    #####: 1217:                    break;
        -: 1218:                }
        -: 1219:            }
    #####: 1220:            if (index > -1)
        -: 1221:            {
        -: 1222:                //trash both treasure cards
    #####: 1223:                discardCard(handPos, currentPlayer, state, 1);
    #####: 1224:                discardCard(index, currentPlayer, state, 1);
        -: 1225:                
        -: 1226:                //gain 4 Gold cards
    #####: 1227:                for (i = 0; i < 4; i++)
        -: 1228:                {
    #####: 1229:                    gainCard(gold, state, 1, currentPlayer);
        -: 1230:                }
        -: 1231:                
        -: 1232:                //return success
    #####: 1233:                return 1;
        -: 1234:            }
        -: 1235:            
        -: 1236:            //no second treasure_map found in hand
    #####: 1237:            return -1;
        -: 1238:    }
        -: 1239:    
    #####: 1240:    return -1;
        -: 1241:}
        -: 1242:
        2: 1243:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1244:{
        -: 1245:    
        -: 1246:    //if card is not trashed, added to Played pile 
        2: 1247:    if (trashFlag < 1)
        -: 1248:    {
        -: 1249:        //add card to played pile
        2: 1250:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1251:        state->playedCardCount++;
        -: 1252:    }
        -: 1253:    
        -: 1254:    //set played card to -1
        2: 1255:    state->hand[currentPlayer][handPos] = -1;
        -: 1256:    
        -: 1257:    //remove card from player's hand
        2: 1258:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1259:    {
        -: 1260:        //reduce number of cards in hand
    #####: 1261:        state->handCount[currentPlayer]--;
        -: 1262:    }
        2: 1263:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1264:    {
        -: 1265:        //reduce number of cards in hand
    #####: 1266:        state->handCount[currentPlayer]--;
        -: 1267:    }
        -: 1268:    else 	
        -: 1269:    {
        -: 1270:        //replace discarded card with last card in hand
        2: 1271:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1272:        //set last card to -1
        2: 1273:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1274:        //reduce number of cards in hand
        2: 1275:        state->handCount[currentPlayer]--;
        -: 1276:    }
        -: 1277:    
        2: 1278:    return 0;
        -: 1279:}
        -: 1280:
    #####: 1281:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1282:{
        -: 1283:    //Note: supplyPos is enum of choosen card
        -: 1284:    
        -: 1285:    //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1286:    if ( supplyCount(supplyPos, state) < 1 )
        -: 1287:    {
    #####: 1288:        return -1;
        -: 1289:    }
        -: 1290:    
        -: 1291:    //added card for [whoseTurn] current player:
        -: 1292:    // toFlag = 0 : add to discard
        -: 1293:    // toFlag = 1 : add to deck
        -: 1294:    // toFlag = 2 : add to hand
        -: 1295:    
    #####: 1296:    if (toFlag == 1)
        -: 1297:    {
    #####: 1298:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1299:        state->deckCount[player]++;
        -: 1300:    }
    #####: 1301:    else if (toFlag == 2)
        -: 1302:    {
    #####: 1303:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1304:        state->handCount[player]++;
        -: 1305:    }
        -: 1306:    else
        -: 1307:    {
    #####: 1308:        state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1309:        state->discardCount[player]++;
        -: 1310:    }
        -: 1311:    
        -: 1312:    //decrease number in supply pile
    #####: 1313:    state->supplyCount[supplyPos]--;
        -: 1314:    
    #####: 1315:    return 0;
        -: 1316:}
        -: 1317:
        9: 1318:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1319:{
        -: 1320:    int i;
        -: 1321:    
        -: 1322:    //reset coin count
        9: 1323:    state->coins = 0;
        -: 1324:    
        -: 1325:    //add coins for each Treasure card in player's hand
       61: 1326:    for (i = 0; i < state->handCount[player]; i++)
        -: 1327:    {
       52: 1328:        if (state->hand[player][i] == copper)
        -: 1329:        {
       36: 1330:            state->coins += 1;
        -: 1331:        }
       16: 1332:        else if (state->hand[player][i] == silver)
        -: 1333:        {
    #####: 1334:            state->coins += 2;
        -: 1335:        }
       16: 1336:        else if (state->hand[player][i] == gold)
        -: 1337:        {
    #####: 1338:            state->coins += 3;
        -: 1339:        }	
        -: 1340:    }	
        -: 1341:    
        -: 1342:    //add bonus
        9: 1343:    state->coins += bonus;
        -: 1344:    
        9: 1345:    return 0;
        -: 1346:}
        -: 1347:
        -: 1348:
        -: 1349://end of dominion.c