        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "rngs.h"
        -:    3:#include <stdio.h>
        -:    4:#include <math.h>
        -:    5:#include <stdlib.h>
        -:    6:#include <assert.h>
        -:    7:
        -:    8:#define MAX_TESTS 12
        -:    9:
        -:   10://This randomly tests Adventurer
        -:   11:
        1:   12:int main(int argc,char *argv[]) {
        -:   13:
        1:   14:	printf("Random testing of #2 cards\n");
        -:   15:	int num_test;
        1:   16:	num_test = 100;
        1:   17:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   18:	       sea_hag, tribute, smithy};
        -:   19:	int i,player;
        -:   20:
      101:   21:	for(i=0;i<100;++i)
        -:   22:	{
        -:   23:		int seed;
      100:   24:		if(2 <= argc)	//number of arguments is greater than 2
        -:   25:		{
      100:   26:			seed = atoi(argv[1]);
        -:   27:			
        -:   28:		}
        -:   29:		else
    #####:   30:			seed = rand();
        -:   31:	
        -:   32:		//get the random number generation going
      100:   33:			player = rand()%4;		//randomly assigned
        -:   34:		struct gameState g;		//get a new game
        -:   35:		
      100:   36:		initializeGame(player,k,seed,&g);	
        -:   37:		int i;
        -:   38:		//allocate the hand an the deck for the player
      228:   39:		for(i=0;i<player;++i)
        -:   40:		{
        -:   41:			//rand within the modulous
      128:   42:			g.deckCount[i] = rand()%MAX_DECK;
      128:   43:			g.handCount[i] = rand()%MAX_HAND;	
        -:   44:
        -:   45:		}
        -:   46:		int r;
      100:   47:		r = cardEffect(gardens,1,1,1,&g,1,0);
        -:   48:	}
        -:   49:	
        1:   50:	printf("done\n");
        1:   51:	 return 0;
        -:   52:}
