        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "rngs.h"
        -:    3:#include <stdio.h>
        -:    4:#include <math.h>
        -:    5:#include <stdlib.h>
        -:    6:#include <assert.h>
        -:    7:
        -:    8:#define MAX_TESTS 12
        -:    9:
        -:   10://This randomly tests Adventurer
        -:   11:
        1:   12:int main(int argc,char *argv[]) {
        -:   13:
        1:   14:	printf("Random testing of #1 cards\n");
        1:   15:	int num_test = 100;
        1:   16:	int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   17:	       sea_hag, tribute, smithy};
        -:   18:	int i,player;
        -:   19:	
        -:   20:
      101:   21:	for(i=0;i<100;++i)
        -:   22:	{
        -:   23:
        -:   24:		//get the random number generation going
        -:   25:		int seed;
      100:   26:		seed = rand();
        -:   27:
      100:   28:		player = rand()%4;		//randomly assigned	
        -:   29:		struct gameState g;		//get a new game
        -:   30:	
      100:   31:		initializeGame(player,k,seed,&g);	
        -:   32:		int i;
        -:   33:		//allocate the hand an the deck for the player
      271:   34:		for(i=0;i<player;++i)
        -:   35:		{
        -:   36:			//rand within the modulous
      171:   37:			g.deckCount[i] = rand()%MAX_DECK;
      171:   38:			g.handCount[i] = rand()%MAX_HAND;	
        -:   39:
        -:   40:		}
        -:   41:	
        -:   42:		int r;
      100:   43:		r = cardEffect(smithy,1,1,1,&g,1,0);
        -:   44:	
        -:   45:
        -:   46:	}
        -:   47:	
        1:   48:	printf("done\n");
        1:   49:	 return 0;
        -:   50:} 
